from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("8.4.1")


configfile: "config/config.yaml"


include: "rules/common.smk"


rule all:
    input:
        ws_path("MR_instruments_best_snps_from_LB.txt"),
        ws_path("MR_instruments_best_snps_from_LB_liftover.txt"),
        ws_path("MR_instruments_best_snps_from_LB_unmapped.txt"),
        ws_path("MR_instruments_conditional_analysis.txt"),
        ws_path("mapped_LB.txt"),
        ws_path("annotated_LB.txt"),
        ws_path("heterogenous_LB.txt"),

rule select_best_SNP_from_LocusBreaker:
    input:
        lb=config.get("locus_breaker_filepath"),
        mapping=config.get("mapping_filepath"),
    output:
        MR=ws_path("MR_instruments_best_snps_from_LB.txt"),
        mapped=ws_path("mapped_LB.txt"),
        annotated=ws_path("annotated_LB.txt"),
    resources:
        runtimes=lambda wc, attempt: attempt * 20,
    params:
        NEF=config.get("params").get("nef"),
        sumstats_path=config.get("sum_stat_path"),
        path_to_targets_list=config.get("array_list_path"),
    conda:
        "envs/r_environment.yml"
    shell:
        """
         Rscript workflow/scripts/s01_best_snp_locus_breaker_for_MR.R \
            --input {input.lb} \
            --path {params.sumstats_path} \
            --array_path {params.path_to_targets_list} \
            --mapping {input.mapping} \
            --NEF {params.NEF} \
            --map_output {output.mapped} \
            --MR_output {output.MR} \
            --annot_output {output.annotated}
   """

rule gwas_liftover:
    input:
        input_file = ws_path("MR_instruments_best_snps_from_LB.txt"),
    output:
        liftover_output_file = ws_path("MR_instruments_best_snps_from_LB_liftover.txt"),
        unmapped_output_file = ws_path("MR_instruments_best_snps_from_LB_unmapped.txt"),
    resources:
        runtimes=lambda wc, attempt: attempt * 20,
    conda:
        "envs/gwaslab_environment.yml",
    params:
        snpid="SNPID",
        chrom="CHR",
        pos="POS",
        ea="EA",
        nea="NEA",
        neaf="EAF",
        beta="BETA",
        se="SE",
        mlog10p="MLOG10P",
        sep=",",
        from_build="19",
        to_build="38"
    script:
        "scripts/s04_liftover.py"

rule heterogenous_filter:
    input:
        ws_path("annotated_LB.txt"),
    output:
        ws_path("heterogenous_LB.txt"),
    resources:
        runtimes=lambda wc, attempt: attempt * 20,
    params:
        NEF=config.get("params").get("nef"),
        Isquare=config.get("params").get("Isquare")
    conda:
        "envs/r_environment.yml"
    shell:
        """
         Rscript workflow/scripts/s03_heterogenous_filter.R \
            --input {input} \
            --NEF {params.NEF} \
            --het_output {output} \
            --Isquare_thresh {params.Isquare}
   """

rule select_SNP_from_cojo:
    input:
        cojo=config.get("cojo_results"),
        mapping=config.get("mapping_filepath"),
    output:
        unconditional=ws_path("MR_instruments_unconditional_analysis.txt"),
        conditional=ws_path("MR_instruments_conditional_analysis.txt"),
    resources:
        runtimes=lambda wc, attempt: attempt * 120,
    conda:
        "envs/r_environment.yml"
    shell:
        """
        Rscript workflow/scripts/s02_instruments_from_conditional_analysis.R \
            --input {input.cojo} \
            --mapping {input.mapping} \
            --conditional_output {output.conditional} \
            --unconditional_output {output.unconditional}
"""
